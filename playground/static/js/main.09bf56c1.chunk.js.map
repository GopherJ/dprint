{"version":3,"sources":["components/Spinner.tsx","constants.ts","components/CodeEditor.tsx","components/ExternalLink.tsx","Playground.tsx","serviceWorker.tsx","index.tsx"],"names":["Spinner","props","backgroundColor","react_default","a","createElement","className","style","dist","color","loading","size","css","id","CodeEditor","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","editor","lastScrollTop","state","editorComponent","undefined","editorDidMount","bind","assertThisInitialized","reactMonacoEditorPromise","Promise","all","__webpack_require__","e","then","t","monacoEditor","languages","typescript","typescriptDefaults","setCompilerOptions","noLib","target","ScriptTarget","ESNext","setDiagnosticsOptions","noSyntaxValidation","noSemanticValidation","defineTheme","base","inherit","rules","colors","editorRuler.foreground","setState","default","catch","err","console","log","inherits","createClass","key","value","updateScrollTop","cssConstants","getEditor","_this2","width","height","text","theme","language","onChange","options","automaticLayout","renderWhitespace","readOnly","readonly","minimap","enabled","quickSuggestions","wordBasedSuggestions","rulers","lineWidth","_this3","onDidChangeModelContent","setPosition","column","lineNumber","onDidScrollChange","scrollTopChanged","onScrollTopChange","scrollTop","_this4","setTimeout","setScrollTop","React","Component","ExternalLink","href","url","rel","config","resolveConfiguration","Playground","lastUpdateTimeout","initialText","concat","formattedText","formatText","onTextChange","index_esm","split","defaultSize","allowResize","constants","minSize","CodeEditor_CodeEditor","newText","clearTimeout","formatFileText","toString","Boolean","window","location","hostname","match","ReactDOM","render","Playground_Playground","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09bf56c1.chunk.js","sourcesContent":["import React from \"react\";\nimport { BeatLoader } from \"react-spinners\";\n\nexport function Spinner(props: { backgroundColor?: string; }) {\n    const { backgroundColor } = props;\n    return (\n        <div className={\"verticallyCenter horizontallyCenter fillHeight\"} style={{ backgroundColor }}>\n            <BeatLoader color={\"#fff\"} loading={true} size={25} />\n        </div>\n    );\n}\n","export const css = {\n    viewOnGitHub: {\n        id: \"viewOnGitHub\"\n    },\n    codeEditor: {\n        id: \"codeEditor\"\n    }\n};\n","import React from \"react\";\nimport ReactMonacoEditorForTypes from \"react-monaco-editor\";\nimport * as monacoEditorForTypes from \"monaco-editor\";\nimport { Spinner } from \"./Spinner\";\nimport { css as cssConstants } from \"../constants\";\n\nexport interface CodeEditorProps {\n    onChange?: (text: string) => void;\n    text?: string;\n    readonly?: boolean;\n    lineWidth: number;\n    scrollTop: number;\n    onScrollTopChange: (scrollTop: number) => void;\n}\n\nexport interface CodeEditorState {\n    editorComponent: (typeof ReactMonacoEditorForTypes) | undefined | false;\n}\n\nexport class CodeEditor extends React.Component<CodeEditorProps, CodeEditorState> {\n    private editor: monacoEditorForTypes.editor.IStandaloneCodeEditor | undefined;\n\n    constructor(props: CodeEditorProps) {\n        super(props);\n        this.state = {\n            editorComponent: undefined\n        };\n        this.editorDidMount = this.editorDidMount.bind(this);\n\n        const reactMonacoEditorPromise = import(\"react-monaco-editor\");\n        import(\"monaco-editor\").then(monacoEditor => {\n            monacoEditor.languages.typescript.typescriptDefaults.setCompilerOptions({\n                noLib: true,\n                target: monacoEditor.languages.typescript.ScriptTarget.ESNext\n            });\n            monacoEditor.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n                noSyntaxValidation: true,\n                noSemanticValidation: true\n            });\n            monacoEditor.editor.defineTheme(\"dprint-theme\", {\n                base: \"vs-dark\",\n                inherit: true,\n                rules: [],\n                colors: {\n                    \"editorRuler.foreground\": \"#283430\"\n                }\n            });\n\n            reactMonacoEditorPromise.then(editor => {\n                this.setState({ editorComponent: editor.default });\n            }).catch(err => {\n                console.log(err);\n                this.setState({ editorComponent: false });\n            });\n        }).catch(err => {\n            console.log(err);\n            this.setState({ editorComponent: false });\n        });\n    }\n\n    render() {\n        this.updateScrollTop();\n\n        return (\n            <div id={cssConstants.codeEditor.id}>\n                {this.getEditor()}\n            </div>\n        );\n    }\n\n    private getEditor() {\n        if (this.state.editorComponent == null)\n            return <Spinner backgroundColor=\"#1e1e1e\" />;\n        if (this.state.editorComponent === false)\n            return <div className={\"errorMessage\"}>Error loading code editor. Please refresh the page to try again.</div>;\n\n        return (\n            <this.state.editorComponent\n                width=\"100%\"\n                height=\"100%\"\n                value={this.props.text}\n                theme=\"dprint-theme\"\n                language=\"typescript\"\n                onChange={text => this.props.onChange && this.props.onChange(text)}\n                editorDidMount={this.editorDidMount}\n                options={{\n                    automaticLayout: true,\n                    renderWhitespace: \"all\",\n                    readOnly: this.props.readonly || false,\n                    minimap: { enabled: false },\n                    quickSuggestions: false,\n                    wordBasedSuggestions: false,\n                    rulers: [this.props.lineWidth - 1]\n                }}\n            />\n        );\n    }\n\n    private editorDidMount(editor: monacoEditorForTypes.editor.IStandaloneCodeEditor) {\n        this.editor = editor;\n\n        this.editor.onDidChangeModelContent(() => {\n            if (this.props.readonly) {\n                this.editor!.setPosition({\n                    column: 1,\n                    lineNumber: 1\n                });\n            }\n        });\n\n        this.editor.onDidScrollChange(e => {\n            if (e.scrollTopChanged && this.props.onScrollTopChange)\n                this.props.onScrollTopChange(e.scrollTop);\n        });\n    }\n\n    private lastScrollTop = 0;\n    private updateScrollTop() {\n        if (this.editor == null || this.lastScrollTop === this.props.scrollTop)\n            return;\n\n        // todo: not sure how to not do this in the render method? I'm not a react/web person.\n        setTimeout(() => {\n            this.editor!.setScrollTop(this.props.scrollTop);\n            this.lastScrollTop = this.props.scrollTop;\n        }, 0);\n    }\n}\n","import React from \"react\";\n\nexport function ExternalLink(props: { text: string; url: string; id?: string; }): React.ReactElement {\n    return <a id={props.id} href={props.url} rel=\"noopener noreferrer\">{props.text}</a>;\n}\n","import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport { formatFileText, resolveConfiguration } from \"dprint\";\nimport { CodeEditor, ExternalLink } from \"./components\";\nimport * as constants from \"./constants\";\nimport \"./Playground.css\";\nimport \"./external/react-splitpane.css\";\n\nexport interface PlaygroundState {\n    text: string;\n    formattedText: string;\n    scrollTop: number;\n}\n\nconst config = resolveConfiguration({\n    lineWidth: 80\n}).config;\n\nexport class Playground extends React.Component<{}, PlaygroundState> {\n    constructor(props: {}) {\n        super(props);\n\n        const initialText = getInitialText();\n        this.state = {\n            text: initialText,\n            formattedText: this.formatText(initialText),\n            scrollTop: 0\n        };\n\n        this.onTextChange = this.onTextChange.bind(this);\n        this.onScrollTopChange = this.onScrollTopChange.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SplitPane split=\"horizontal\" defaultSize={50} allowResize={false}>\n                    <header className=\"App-header\">\n                        <h2 id=\"title\">dprint - Playground</h2>\n                        <ExternalLink id={constants.css.viewOnGitHub.id} url=\"https://github.com/dsherret/dprint\" text=\"View on GitHub\" />\n                    </header>\n                    {/* Todo: re-enable resizing, but doesn't seem to work well with monaco editor on\n                    the right side as it won't reduce its width after being expanded. */}\n                    <SplitPane split=\"vertical\" minSize={50} defaultSize=\"50%\" allowResize={false}>\n                        <CodeEditor\n                            onChange={this.onTextChange}\n                            text={this.state.text}\n                            lineWidth={config[\"typescript.lineWidth\"]}\n                            onScrollTopChange={this.onScrollTopChange}\n                            scrollTop={this.state.scrollTop}\n                        />\n                        <CodeEditor\n                            text={this.state.formattedText}\n                            readonly={true}\n                            lineWidth={config[\"typescript.lineWidth\"]}\n                            onScrollTopChange={this.onScrollTopChange}\n                            scrollTop={this.state.scrollTop}\n                        />\n                    </SplitPane>\n                </SplitPane>\n            </div>\n        );\n    }\n\n    private lastUpdateTimeout: NodeJS.Timeout | undefined;\n    private onTextChange(newText: string) {\n        if (this.lastUpdateTimeout != null)\n            clearTimeout(this.lastUpdateTimeout);\n\n        this.setState({ text: newText });\n\n        this.lastUpdateTimeout = setTimeout(() => {\n            this.setState({\n                formattedText: this.formatText(newText)\n            });\n        }, 250);\n    }\n\n    private onScrollTopChange(scrollTop: number) {\n        this.setState({ scrollTop });\n    }\n\n    private formatText(text: string) {\n        try {\n            return formatFileText(\"file.ts\", text, config);\n        } catch (err) {\n            return err.toString();\n        }\n    }\n}\n\nfunction getInitialText() {\n    return `// I quickly threw together this playground. I'll add configuration here\n// in the future. In the meantime, this playground has all the defaults,\n// except it uses a lineWidth of ${config[\"typescript.lineWidth\"]} and not 120.\n\n// In the future, I'll move this overview somewhere else...\n\n/* ------- MULTILINE, HANGING INDENT, AND LINE WIDTH ------- */\n\n// The following holds true for most nodes. Generally, nodes like\n// call expressions will prefer to be on one line...\n\ncallExpression(argument1, argument2,\n    argument3,    argument4);\n\n// ...until you place the first arg on a different line...\ncall.expression(\n    1, 2);\n\n// ...or the statement exceeds the line width.\ncallExpression(argument1, argument2, argument3, argument4, argument5, argument6, argument7);\n\n//If you don't like hanging, there is\n//configuration coming in issue #14 to force newlines. Until then, place\n//the first arg on a different line as the open paren, as shown above.\n\n/* ------- EXPLICIT NEWLINES ------- */\n\n// For the most part, dprint allows you to place certain nodes like\n// logical, binary, and property access expressions on different\n// lines as you see fit. It does this because newlines can often\n// convey meaning or grouping.\nconst mathResult = 1+2*6+\n    moreMath*math\n;\nconst binaryResult = true || false &&\npossiblyTrue || (\n true&&false||maybeTrue);\n\nexpect(someFunctionCall(1  ,2))\n    .to.    equal(5 );\n\n// As seen above, placing a node on the next line after an open paren\n// will indent the text within the parens.\nconst anotherMathResult = (\n1 + 2)\n\n// ...the same happens with statements like if statements.\nif (\n    someCondition && otherCondition) {\n\n}\n\n/* ------- BRACE POSITION ------- */\n\n// By default, when an if or similar statement hangs, it will place the brace\n// on a new line. This is to help separate the condition so it doesn't blur\n// in with the first statement. You can disable this behaviour by setting the\n// \\`bracePosition\\` setting to \\`sameLine\\` (defaults to \\`newLineIfHanging\\`).\nif (someCondition && otherCondition || myCondition && yourCondition && myOtherCondition) {\n    call();\n}\nelse {\n    console .   log(  'hello'\n)}\n\n// By default, dprint will maintain the brace behaviour, but this can be\n// configured with the \\`useBraces\\` setting. The \\`preferNone\\` option is\n// my favourite as it will add braces if the header or statement is hanging\n// or, in the case of the last control flow statement (ex. \\`else\\`), it will\n// add braces to that if the previous control flow statement required braces\n// in order to prevent dangling else/else if statements. You may want to use\n// the \\`always\\` option though.\nif (true)\n    statement;\n\n/* ------- CLASS / INTERFACE HEADERS ------- */\n\n// Classes/Interfaces will have their extends and implements clause put on\n// a new line when they exceed the line width. Again, the brace position\n// can be configured via the \\`bracePosition\\` option.\nclass MyClass extends SomeThing implements OtherThing, LoggerThing, FunctionalityThing, OtherOtherThing, ExtendingLineWidthTwiceThing {\n}\n\n/* ------- STATEMENT / MEMBER SPACING ------- */\n\nfunction myFunction() {\n\n        // Line breaks will be maintained, but not when they are\n\n\n        // consecutive or if they are at the beginning or end of a block.\n\n        return 5;\n\n}\n\ninterface MyInterface {\n\n    prop: string;\n\n\n    otherProp: number;\n\n    method(): number;\n    otherMethod(): void;\n\n}\n\n/* ------- IGNORING A FILE ------- */\n\n// Move the following comment to the top of the file:\n/* dprint:ignoreFile */`;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\"\n        // [::1] is the IPv6 localhost address.\n        || window.location.hostname === \"[::1]\"\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        || window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \"\n                            + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            }\n            else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null)\n                    return;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \"\n                                    + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate)\n                                config.onUpdate(registration);\n                        }\n                        else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess)\n                                config.onSuccess(registration);\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404\n                || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            }\n            else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Playground } from \"./Playground\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Playground />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}