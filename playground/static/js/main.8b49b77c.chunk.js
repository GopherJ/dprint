(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{363:function(e,t,n){e.exports=n(908)},368:function(e,t,n){},377:function(e,t){},386:function(e,t){},387:function(e,t){},907:function(e,t,n){},908:function(e,t,n){"use strict";n.r(t);var i=n(0),o=n.n(i),a=n(361),r=n.n(a),s=(n(368),n(109)),l=n(110),c=n(112),h=n(111),d=n(55),u=n(113),m=n(191),p=n(190),f=n(362);function g(e){var t=e.backgroundColor;return o.a.createElement("div",{className:"verticallyCenter horizontallyCenter fillHeight",style:{backgroundColor:t}},o.a.createElement(f.a,{color:"#fff",loading:!0,size:25}))}var b={id:"viewOnGitHub"},y={id:"codeEditor",containerId:"editorContainer"},v=function(e){function t(e){var i;Object(s.a)(this,t),(i=Object(c.a)(this,Object(h.a)(t).call(this,e))).editor=void 0,i.state={editorComponent:void 0},i.editorDidMount=i.editorDidMount.bind(Object(d.a)(i));var o=Promise.all([n.e(0),n.e(6)]).then(n.t.bind(null,1129,7));return Promise.all([n.e(0),n.e(5)]).then(n.bind(null,1182)).then(function(e){e.languages.typescript.typescriptDefaults.setCompilerOptions({noLib:!0,target:e.languages.typescript.ScriptTarget.ESNext}),e.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSyntaxValidation:!0,noSemanticValidation:!0}),e.editor.defineTheme("dprint-theme",{base:"vs-dark",inherit:!0,rules:[],colors:{"editorRuler.foreground":"#283430"}}),o.then(function(e){i.setState({editorComponent:e.default})}).catch(function(e){console.log(e),i.setState({editorComponent:!1})})}).catch(function(e){console.log(e),i.setState({editorComponent:!1})}),i}return Object(u.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){return o.a.createElement("div",{id:y.id},o.a.createElement("div",{id:y.containerId},this.getEditor()))}},{key:"getEditor",value:function(){var e=this;return null==this.state.editorComponent?o.a.createElement(g,{backgroundColor:"#1e1e1e"}):!1===this.state.editorComponent?o.a.createElement("div",{className:"errorMessage"},"Error loading code editor. Please refresh the page to try again."):o.a.createElement(this.state.editorComponent,{width:"100%",height:"100%",value:this.props.text,theme:"dprint-theme",language:"typescript",onChange:function(t){return e.props.onChange&&e.props.onChange(t)},editorDidMount:this.editorDidMount,options:{automaticLayout:!0,renderWhitespace:"all",readOnly:this.props.readonly||!1,minimap:{enabled:!1},quickSuggestions:!1,rulers:[this.props.lineWidth-1]}})}},{key:"editorDidMount",value:function(e){var t=this;this.editor=e,this.editor.onDidChangeModelContent(function(){t.props.readonly&&t.editor.setPosition({column:1,lineNumber:1})})}}]),t}(o.a.Component);function w(e){return o.a.createElement("a",{id:e.id,href:e.url,rel:"noopener noreferrer"},e.text)}n(907);var C=Object(p.resolveConfiguration)({lineWidth:80}).config,E=function(e){function t(e){var n;Object(s.a)(this,t),(n=Object(c.a)(this,Object(h.a)(t).call(this,e))).lastUpdateTimeout=void 0;var i="// I quickly threw together this playground. I'll add configuration here\n// in the future. In the meantime, this playground has all the defaults,\n// except it uses a lineWidth of ".concat(C["typescript.lineWidth"]," and not 120.\n\n// In the future, I'll move this overview somewhere else...\n\n/* ------- MULTILINE, HANGING INDENT, AND LINE WIDTH ------- */\n\n// The following holds true for most nodes. Generally, nodes like\n// call expressions will prefer to be on one line...\n\ncallExpression(argument1, argument2,\n    argument3,    argument4);\n\n// ...until you place the first arg on a different line...\ncall.expression(\n    1, 2);\n\n// ...or the statement exceeds the line width.\ncallExpression(argument1, argument2, argument3, argument4, argument5, argument6, argument7);\n\n//If you don't like hanging, there is\n//configuration coming in issue #14 to force newlines. Until then, place\n//the first arg on a different line as the open paren, as shown above.\n\n/* ------- EXPLICIT NEWLINES ------- */\n\n// For the most part, dprint allows you to place certain nodes like\n// logical, binary, and property access expressions on different\n// lines as you see fit. It does this because newlines can often\n// convey meaning or grouping.\nconst mathResult = 1+2*6+\n    moreMath*math\n;\nconst binaryResult = true || false &&\npossiblyTrue || (\n true&&false||maybeTrue);\n\nexpect(someFunctionCall(1  ,2))\n    .to.    equal(5 );\n\n// As seen above, placing a node on the next line after an open paren\n// will indent the text within the parens.\nconst anotherMathResult = (\n1 + 2)\n\n// ...the same happens with statements like if statements.\nif (\n    someCondition && otherCondition) {\n\n}\n\n/* ------- BRACE POSITION ------- */\n\n// By default, when an if or similar statement hangs, it will place the brace\n// on a new line. This is to help separate the condition so it doesn't blur\n// in with the first statement. You can disable this behaviour by setting the\n// `bracePosition` setting to `sameLine` (defaults to `newLineIfHanging`).\nif (someCondition && otherCondition || myCondition && yourCondition && myOtherCondition) {\n    call();\n}\nelse {\n    console .   log(  'hello'\n)}\n\n// By default, dprint will maintain the brace behaviour, but this can be\n// configured with the `useBraces` setting. The `preferNone` option is\n// my favourite as it will add braces if the header or statement is hanging\n// or, in the case of the last control flow statement (ex. `else`), it will\n// add braces to that if the previous control flow statement required braces\n// in order to prevent dangling else/else if statements. You may want to use\n// the `always` option though.\nif (true)\n    statement;\n\n/* ------- CLASS / INTERFACE HEADERS ------- */\n\n// Classes/Interfaces will have their extends and implements clause put on\n// a new line when they exceed the line width. Again, the brace position\n// can be configured via the `bracePosition` option.\nclass MyClass extends SomeThing implements OtherThing, LoggerThing, FunctionalityThing, OtherOtherThing, ExtendingLineWidthTwiceThing {\n}\n\n/* ------- STATEMENT / MEMBER SPACING ------- */\n\nfunction myFunction() {\n\n        // Line breaks will be maintained, but not when they are\n\n\n        // consecutive or if they are at the beginning or end of a block.\n\n        return 5;\n\n}\n\ninterface MyInterface {\n\n    prop: string;\n\n\n    otherProp: number;\n\n    method(): number;\n    otherMethod(): void;\n\n}\n\n/* ------- IGNORING A FILE ------- */\n\n// Move the following comment to the top of the file:\n/* dprint:ignoreFile */");return n.state={text:i,formattedText:n.formatText(i)},n.onTextChange=n.onTextChange.bind(Object(d.a)(n)),n}return Object(u.a)(t,e),Object(l.a)(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"App"},o.a.createElement(m.a,{split:"horizontal",defaultSize:50,allowResize:!1},o.a.createElement("header",{className:"App-header"},o.a.createElement("h2",{id:"title"},"dprint - Playground"),o.a.createElement(w,{id:b.id,url:"https://github.com/dsherret/dprint",text:"View on GitHub"})),o.a.createElement(m.a,{split:"vertical",minSize:50,defaultSize:"50%"},o.a.createElement(v,{onChange:this.onTextChange,text:this.state.text,lineWidth:C["typescript.lineWidth"]}),o.a.createElement(v,{text:this.state.formattedText,readonly:!0,lineWidth:C["typescript.lineWidth"]}))))}},{key:"onTextChange",value:function(e){var t=this;null!=this.lastUpdateTimeout&&clearTimeout(this.lastUpdateTimeout),this.setState({text:e}),this.lastUpdateTimeout=setTimeout(function(){t.setState({formattedText:t.formatText(e)})},250)}},{key:"formatText",value:function(e){try{return Object(p.formatFileText)("file.ts",e,C)}catch(t){return t.toString()}}}]),t}(o.a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(E,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[363,3,4]]]);
//# sourceMappingURL=main.8b49b77c.chunk.js.map