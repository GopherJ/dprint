{"version":3,"sources":["components/Spinner.tsx","components/CodeEditor.tsx","components/ConfigurationSelection.tsx","components/ExternalLink.tsx","utils/UrlSharer.ts","Playground.tsx","serviceWorker.tsx","index.tsx"],"names":["Spinner","props","backgroundColor","className","style","color","loading","size","CodeEditor","editor","lastScrollTop","state","editorComponent","undefined","editorDidMount","bind","reactMonacoEditorPromise","then","monacoEditor","languages","typescript","typescriptDefaults","setCompilerOptions","noLib","target","ScriptTarget","ESNext","allowNonTsExtensions","setDiagnosticsOptions","noSyntaxValidation","noSemanticValidation","defineTheme","base","inherit","rules","colors","setState","default","catch","err","console","log","this","updateScrollTop","id","getEditor","width","height","value","text","theme","language","onChange","options","automaticLayout","renderWhitespace","readOnly","readonly","minimap","enabled","quickSuggestions","rulers","lineWidth","onDidChangeModelContent","setPosition","column","lineNumber","onDidScrollChange","e","scrollTopChanged","onScrollTopChange","scrollTop","setTimeout","setScrollTop","React","Component","useBraceOptions","bracePositionOptions","singleBodyPositionOptions","nextControlFlowPositionOptions","operatorPositionOptions","trailingCommaOptions","arrowFunctionUseParenthesesOptions","enumMemberSpacingOptions","ConfigurationSelection","title","getNumberConfig","getBooleanConfig","getSelectForConfig","configKey","config","type","checked","updateConfig","values","map","i","key","inputMode","result","Math","max","round","valueAsNumber","newConfig","onUpdateConfig","ConfigurationItem","children","ExternalLink","href","url","rel","UrlSaver","locationHash","document","location","hash","matches","exec","length","decompress","error","getText","JSON","parse","getConfig","window","history","replaceState","compressToEncodedURIComponent","stringify","decompressFromEncodedURIComponent","trim","urlSaver","Playground","formatText","resolveConfig","lastUpdateTimeout","getUrlInfo","initialText","initialUnresolvedConfig","initialConfig","indentWidth","useTabs","semiColons","singleQuotes","trailingCommas","useBraces","bracePosition","singleBodyPosition","nextControlFlowPosition","operatorPosition","preferHanging","formattedText","onConfigUpdate","onTextChange","split","defaultSize","allowResize","minSize","pane1Style","overflowX","overflowY","pane2Style","getFormattedText","updateUrl","newText","clearTimeout","urlInfo","Boolean","hostname","match","Loader","wasmPkg","format_text","getConfigAsMap","resolve_config","Map","Object","keys","Error","set","toString","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74437b2e.chunk.js","sourcesContent":["import React from \"react\";\nimport { BeatLoader } from \"react-spinners\";\n\nexport function Spinner(props: { backgroundColor?: string; }) {\n    const { backgroundColor } = props;\n    return (\n        <div className={\"verticallyCenter horizontallyCenter fillHeight\"} style={{ backgroundColor }}>\n            <BeatLoader color={\"#fff\"} loading={true} size={25} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactMonacoEditorForTypes from \"react-monaco-editor\";\nimport * as monacoEditorForTypes from \"monaco-editor\";\nimport { Spinner } from \"./Spinner\";\n\nexport interface CodeEditorProps {\n    onChange?: (text: string) => void;\n    text?: string;\n    readonly?: boolean;\n    lineWidth: number;\n    scrollTop: number;\n    onScrollTopChange: (scrollTop: number) => void;\n}\n\nexport interface CodeEditorState {\n    editorComponent: (typeof ReactMonacoEditorForTypes) | undefined | false;\n}\n\nexport class CodeEditor extends React.Component<CodeEditorProps, CodeEditorState> {\n    private editor: monacoEditorForTypes.editor.IStandaloneCodeEditor | undefined;\n\n    constructor(props: CodeEditorProps) {\n        super(props);\n        this.state = {\n            editorComponent: undefined\n        };\n        this.editorDidMount = this.editorDidMount.bind(this);\n\n        const reactMonacoEditorPromise = import(\"react-monaco-editor\");\n        import(\"monaco-editor\").then(monacoEditor => {\n            monacoEditor.languages.typescript.typescriptDefaults.setCompilerOptions({\n                noLib: true,\n                target: monacoEditor.languages.typescript.ScriptTarget.ESNext,\n                allowNonTsExtensions: true\n            });\n            monacoEditor.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n                noSyntaxValidation: true,\n                noSemanticValidation: true\n            });\n            monacoEditor.editor.defineTheme(\"dprint-theme\", {\n                base: \"vs-dark\",\n                inherit: true,\n                rules: [],\n                colors: {\n                    \"editorRuler.foreground\": \"#283430\"\n                }\n            });\n\n            reactMonacoEditorPromise.then(editor => {\n                this.setState({ editorComponent: editor.default });\n            }).catch(err => {\n                console.log(err);\n                this.setState({ editorComponent: false });\n            });\n        }).catch(err => {\n            console.log(err);\n            this.setState({ editorComponent: false });\n        });\n    }\n\n    render() {\n        this.updateScrollTop();\n\n        return (\n            <div id=\"codeEditor\">\n                {this.getEditor()}\n            </div>\n        );\n    }\n\n    private getEditor() {\n        if (this.state.editorComponent == null)\n            return <Spinner backgroundColor=\"#1e1e1e\" />;\n        if (this.state.editorComponent === false)\n            return <div className={\"errorMessage\"}>Error loading code editor. Please refresh the page to try again.</div>;\n\n        return (\n            <this.state.editorComponent\n                width=\"100%\"\n                height=\"100%\"\n                value={this.props.text}\n                theme=\"dprint-theme\"\n                language=\"typescript\"\n                onChange={text => this.props.onChange && this.props.onChange(text)}\n                editorDidMount={this.editorDidMount}\n                options={{\n                    automaticLayout: true,\n                    renderWhitespace: \"all\",\n                    readOnly: this.props.readonly || false,\n                    minimap: { enabled: false },\n                    quickSuggestions: false,\n                    rulers: [this.props.lineWidth - 1]\n                }}\n            />\n        );\n    }\n\n    private editorDidMount(editor: monacoEditorForTypes.editor.IStandaloneCodeEditor) {\n        this.editor = editor;\n\n        this.editor.onDidChangeModelContent(() => {\n            if (this.props.readonly) {\n                this.editor!.setPosition({\n                    column: 1,\n                    lineNumber: 1\n                });\n            }\n        });\n\n        this.editor.onDidScrollChange(e => {\n            if (e.scrollTopChanged && this.props.onScrollTopChange)\n                this.props.onScrollTopChange(e.scrollTop);\n        });\n    }\n\n    private lastScrollTop = 0;\n    private updateScrollTop() {\n        if (this.editor == null || this.lastScrollTop === this.props.scrollTop)\n            return;\n\n        // todo: not sure how to not do this in the render method? I'm not a react/web person.\n        setTimeout(() => {\n            this.editor!.setScrollTop(this.props.scrollTop);\n            this.lastScrollTop = this.props.scrollTop;\n        }, 0);\n    }\n}\n","import React from \"react\";\nimport { AssertTrue, IsExact } from \"conditional-type-checks\";\nimport { TypeScriptConfiguration } from \"dprint-plugin-typescript\";\nimport \"./ConfigurationSelection.css\";\n\nexport interface ConfigurationSelectionProps {\n    config: TypeScriptConfiguration;\n    onUpdateConfig: (config: TypeScriptConfiguration) => void;\n}\n\nconst useBraceOptions = [\"maintain\", \"whenNotSingleLine\", \"always\", \"preferNone\"] as const;\ntype _assertUseBraces = AssertTrue<IsExact<typeof useBraceOptions[number], NonNullable<TypeScriptConfiguration[\"useBraces\"]>>>;\nconst bracePositionOptions = [\"maintain\", \"sameLine\", \"nextLine\", \"nextLineIfHanging\"] as const;\ntype _assertBracePosition = AssertTrue<IsExact<typeof bracePositionOptions[number], NonNullable<TypeScriptConfiguration[\"bracePosition\"]>>>;\nconst singleBodyPositionOptions = [\"maintain\", \"sameLine\", \"nextLine\"] as const;\ntype _assertSingleBodyPositionOptions = AssertTrue<IsExact<typeof singleBodyPositionOptions[number],\n    NonNullable<TypeScriptConfiguration[\"singleBodyPosition\"]>>>;\nconst nextControlFlowPositionOptions = [\"maintain\", \"sameLine\", \"nextLine\"] as const;\ntype _assertNextControlFlowPosition = AssertTrue<IsExact<typeof nextControlFlowPositionOptions[number],\n    NonNullable<TypeScriptConfiguration[\"nextControlFlowPosition\"]>>>;\nconst operatorPositionOptions = [\"maintain\", \"sameLine\", \"nextLine\"] as const;\ntype _assertOperatorPosition = AssertTrue<IsExact<typeof operatorPositionOptions[number], NonNullable<TypeScriptConfiguration[\"operatorPosition\"]>>>;\nconst trailingCommaOptions = [\"never\", \"always\", \"onlyMultiLine\"] as const;\ntype _assertTrailingCommas = AssertTrue<IsExact<typeof trailingCommaOptions[number], NonNullable<TypeScriptConfiguration[\"trailingCommas\"]>>>;\nconst arrowFunctionUseParenthesesOptions = [\"force\", \"maintain\", \"preferNone\"] as const;\ntype _assertArrowFunctionUseParentheses = AssertTrue<IsExact<typeof arrowFunctionUseParenthesesOptions[number],\n    NonNullable<TypeScriptConfiguration[\"arrowFunctionExpression.useParentheses\"]>>>;\nconst enumMemberSpacingOptions = [\"newline\", \"blankline\", \"maintain\"] as const;\ntype _assertEnumMemberSpacing = AssertTrue<IsExact<typeof enumMemberSpacingOptions[number],\n    NonNullable<TypeScriptConfiguration[\"enumDeclaration.memberSpacing\"]>>>;\n\nexport class ConfigurationSelection extends React.Component<ConfigurationSelectionProps> {\n    render() {\n        return <div id=\"configuration\">\n            <ConfigurationItem title=\"Line width\">\n                {this.getNumberConfig(\"lineWidth\")}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Indent width\">\n                {this.getNumberConfig(\"indentWidth\")}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Use tabs\">\n                {this.getBooleanConfig(\"useTabs\")}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Semicolons\">\n                {this.getBooleanConfig(\"semiColons\")}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Single quotes\">\n                {this.getBooleanConfig(\"singleQuotes\")}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Use braces\">\n                {this.getSelectForConfig(\"useBraces\", useBraceOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Brace position\">\n                {this.getSelectForConfig(\"bracePosition\", bracePositionOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Single body position\">\n                {this.getSelectForConfig(\"singleBodyPosition\", singleBodyPositionOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Operator position\">\n                {this.getSelectForConfig(\"operatorPosition\", operatorPositionOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Next control flow position\">\n                {this.getSelectForConfig(\"nextControlFlowPosition\", nextControlFlowPositionOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Trailing commas\">\n                {this.getSelectForConfig(\"trailingCommas\", trailingCommaOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Prefer hanging\">\n                {this.getBooleanConfig(\"preferHanging\")}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Arrow Function - Use parentheses\">\n                {this.getSelectForConfig(\"arrowFunctionExpression.useParentheses\", arrowFunctionUseParenthesesOptions)}\n            </ConfigurationItem>\n            <ConfigurationItem title=\"Enum member spacing\">\n                {this.getSelectForConfig(\"enumDeclaration.memberSpacing\", enumMemberSpacingOptions)}\n            </ConfigurationItem>\n        </div>;\n    }\n\n    private getBooleanConfig(configKey: keyof TypeScriptConfiguration) {\n        const { config } = this.props;\n        return (\n            <input type=\"checkbox\" checked={config[configKey] as boolean} onChange={() => this.updateConfig({ [configKey]: !config[configKey] })} />\n        );\n    }\n\n    private getSelectForConfig(configKey: keyof TypeScriptConfiguration, values: readonly string[]) {\n        const { config } = this.props;\n        return (\n            <select value={config[configKey] as string} onChange={e => this.updateConfig({ [configKey]: e.target.value as any })}>\n                {getOptionsForValues()}\n            </select>\n        );\n\n        function getOptionsForValues() {\n            return values.map((value, i) => (<option key={i} value={value}>{value}</option>));\n        }\n    }\n\n    private getNumberConfig(configKey: keyof TypeScriptConfiguration) {\n        const { config } = this.props;\n        return (\n            <input type=\"number\" inputMode=\"numeric\" value={config[configKey] as number} onChange={e => {\n                const result = Math.max(0, Math.round(e.target.valueAsNumber));\n                this.updateConfig({ [configKey]: result });\n            }} />\n        );\n    }\n\n    private updateConfig(newConfig: Partial<TypeScriptConfiguration>) {\n        this.props.onUpdateConfig({ ...this.props.config, ...newConfig });\n    }\n}\n\ninterface ConfigurationItemProps {\n    title: string;\n}\n\nclass ConfigurationItem extends React.Component<ConfigurationItemProps> {\n    render() {\n        return (\n            <div className=\"configurationItem\">\n                <label>\n                    {this.props.title}:\n                    {this.props.children}\n                </label>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nexport function ExternalLink(props: { text: string; url: string; id?: string; }): React.ReactElement {\n    return <a id={props.id} href={props.url} rel=\"noopener noreferrer\">{props.text}</a>;\n}\n","import { TypeScriptConfiguration } from \"dprint-plugin-typescript\";\nimport { decompressFromEncodedURIComponent, compressToEncodedURIComponent } from \"lz-string\";\n\nexport class UrlSaver {\n    getUrlInfo() {\n        const locationHash = document.location.hash || \"\";\n\n        return {\n            text: getText(),\n            config: getConfig()\n        };\n\n        function getText() {\n            const matches = /code\\/([^/]+)/.exec(locationHash);\n            if (matches == null || matches.length !== 2)\n                return \"\";\n\n            try {\n                return decompress(matches[1]);\n            } catch (err) {\n                console.error(err);\n                return \"\";\n            }\n        }\n\n        function getConfig(): TypeScriptConfiguration {\n            const matches = /config\\/([^/]+)/.exec(locationHash);\n            if (matches == null || matches.length !== 2)\n                return getDefaultConfig();\n\n            try {\n                return JSON.parse(decompress(matches[1]));\n            } catch (err) {\n                console.error(err);\n                return getDefaultConfig();\n            }\n\n            function getDefaultConfig(): TypeScriptConfiguration {\n                return {\n                    lineWidth: 80\n                };\n            }\n        }\n    }\n\n    updateUrl({ text, config }: { text: string; config: TypeScriptConfiguration; }) {\n        window.history.replaceState(\n            undefined,\n            \"\",\n            `#code/${compressToEncodedURIComponent(text)}/config/${compressToEncodedURIComponent(JSON.stringify(config))}`\n        );\n    }\n}\n\nfunction decompress(text: string) {\n    return decompressFromEncodedURIComponent(text.trim()) || \"\"; // will be null on error\n}\n","import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport { TypeScriptConfiguration, ResolvedTypeScriptConfiguration } from \"dprint-plugin-typescript\";\nimport { CodeEditor, ConfigurationSelection, ExternalLink } from \"./components\";\nimport { UrlSaver } from \"./utils\";\nimport \"./Playground.css\";\nimport \"./external/react-splitpane.css\";\n\nexport interface PlaygroundProps {\n    formatText: (text: string, config: TypeScriptConfiguration) => string;\n    resolveConfig: (config: TypeScriptConfiguration) => ResolvedTypeScriptConfiguration;\n}\n\nexport interface PlaygroundState {\n    text: string;\n    formattedText: string;\n    scrollTop: number;\n    config: TypeScriptConfiguration;\n}\n\nconst initialLineWidth = 80;\nconst urlSaver = new UrlSaver();\n\nexport class Playground extends React.Component<PlaygroundProps, PlaygroundState> {\n    private readonly formatText: PlaygroundProps[\"formatText\"];\n    private readonly resolveConfig: PlaygroundProps[\"resolveConfig\"];\n\n    constructor(props: PlaygroundProps) {\n        super(props);\n        this.formatText = props.formatText;\n        this.resolveConfig = props.resolveConfig;\n\n        const { text: initialText, config: initialUnresolvedConfig } = urlSaver.getUrlInfo();\n        const initialConfig = this.resolveConfig(initialUnresolvedConfig);\n        const config: TypeScriptConfiguration = {\n            lineWidth: initialConfig.lineWidth,\n            indentWidth: initialConfig.indentWidth,\n            useTabs: initialConfig.useTabs,\n            semiColons: initialConfig[\"breakStatement.semiColon\"],\n            singleQuotes: initialConfig.singleQuotes,\n            trailingCommas: initialConfig[\"tupleType.trailingCommas\"],\n            useBraces: initialConfig[\"ifStatement.useBraces\"],\n            bracePosition: initialConfig[\"arrowFunctionExpression.bracePosition\"],\n            singleBodyPosition: initialConfig[\"ifStatement.singleBodyPosition\"],\n            nextControlFlowPosition: initialConfig[\"ifStatement.nextControlFlowPosition\"],\n            operatorPosition: initialConfig[\"binaryExpression.operatorPosition\"],\n            preferHanging: initialConfig[\"arrayExpression.preferHanging\"],\n            \"enumDeclaration.memberSpacing\": initialConfig[\"enumDeclaration.memberSpacing\"],\n            \"arrowFunctionExpression.useParentheses\": initialConfig[\"arrowFunctionExpression.useParentheses\"]\n        };\n\n        this.state = {\n            text: initialText,\n            formattedText: this.formatText(initialText, config),\n            scrollTop: 0,\n            config\n        };\n\n        this.onConfigUpdate = this.onConfigUpdate.bind(this);\n        this.onTextChange = this.onTextChange.bind(this);\n        this.onScrollTopChange = this.onScrollTopChange.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SplitPane split=\"horizontal\" defaultSize={50} allowResize={false}>\n                    <header className=\"appHeader\">\n                        <h1 id=\"title\">dprint - Playground</h1>\n                        <div id=\"headerRight\">\n                            <a href=\"/\">Overview</a>\n                            <a href=\"/playground\">Playground</a>\n                            <ExternalLink url=\"https://github.com/dsherret/dprint\" text=\"View on GitHub\" />\n                        </div>\n                    </header>\n                    {/* Todo: re-enable resizing, but doesn't seem to work well with monaco editor on\n                    the right side as it won't reduce its width after being expanded. */}\n                    <SplitPane split=\"vertical\" minSize={50} defaultSize={200} allowResize={false}>\n                        <ConfigurationSelection\n                            config={this.state.config}\n                            onUpdateConfig={this.onConfigUpdate}\n                        />\n                        <SplitPane\n                            split=\"vertical\"\n                            minSize={50}\n                            defaultSize=\"50%\"\n                            allowResize={false}\n                            pane1Style={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\n                            pane2Style={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\n                        >\n                            <CodeEditor\n                                onChange={this.onTextChange}\n                                text={this.state.text}\n                                lineWidth={this.state.config.lineWidth || initialLineWidth}\n                                onScrollTopChange={this.onScrollTopChange}\n                                scrollTop={this.state.scrollTop}\n                            />\n                            <CodeEditor\n                                text={this.state.formattedText}\n                                readonly={true}\n                                lineWidth={this.state.config.lineWidth || initialLineWidth}\n                                onScrollTopChange={this.onScrollTopChange}\n                                scrollTop={this.state.scrollTop}\n                            />\n                        </SplitPane>\n                    </SplitPane>\n                </SplitPane>\n            </div>\n        );\n    }\n\n    private onConfigUpdate(config: TypeScriptConfiguration) {\n        this.setState({ config, formattedText: this.getFormattedText(config) });\n        this.updateUrl({ text: this.state.text, config });\n    }\n\n    private lastUpdateTimeout: NodeJS.Timeout | undefined;\n    private onTextChange(newText: string) {\n        if (this.lastUpdateTimeout != null)\n            clearTimeout(this.lastUpdateTimeout);\n\n        this.setState({ text: newText });\n\n        this.lastUpdateTimeout = setTimeout(() => {\n            this.setState({ formattedText: this.getFormattedText() });\n            this.updateUrl({ text: newText, config: this.state.config });\n        }, 250);\n    }\n\n    private updateUrl(urlInfo: { text: string; config: TypeScriptConfiguration; }) {\n        urlSaver.updateUrl(urlInfo);\n    }\n\n    private getFormattedText(config?: TypeScriptConfiguration) {\n        return this.formatText(this.state.text, config || this.state.config);\n    }\n\n    private onScrollTopChange(scrollTop: number) {\n        this.setState({ scrollTop });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\"\n        // [::1] is the IPv6 localhost address.\n        || window.location.hostname === \"[::1]\"\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        || window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \"\n                            + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            }\n            else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null)\n                    return;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \"\n                                    + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate)\n                                config.onUpdate(registration);\n                        }\n                        else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess)\n                                config.onSuccess(registration);\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404\n                || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            }\n            else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Playground } from \"./Playground\";\nimport { Spinner } from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { TypeScriptConfiguration, ResolvedTypeScriptConfiguration } from \"dprint-plugin-typescript\";\n\ninterface LoaderState {\n    formatText: ((text: string, configuration: TypeScriptConfiguration) => string) | undefined;\n    resolveConfig: ((configuration: TypeScriptConfiguration) => ResolvedTypeScriptConfiguration) | undefined;\n}\n\nclass Loader extends React.Component<{}, LoaderState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            formatText: undefined,\n            resolveConfig: undefined\n        };\n\n        import(\"./wasm\").then(wasmPkg => {\n            this.setState({\n                formatText: (text, config) => {\n                    return wasmPkg.format_text(text, getConfigAsMap(config));\n                },\n                resolveConfig: config => {\n                    return JSON.parse(wasmPkg.resolve_config(getConfigAsMap(config))) as ResolvedTypeScriptConfiguration;\n                }\n            });\n        }).catch(console.error);\n    }\n\n    render() {\n        if (this.state.formatText == null || this.state.resolveConfig == null)\n            return <Spinner />;\n        else\n            return <Playground formatText={this.state.formatText} resolveConfig={this.state.resolveConfig} />;\n    }\n}\n\nReactDOM.render(<Loader />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n\nfunction getConfigAsMap(config: TypeScriptConfiguration) {\n    const map = new Map();\n    for (let key of Object.keys(config)) {\n        const value = (config as any)[key] as unknown;\n        if (value == null)\n            continue;\n        else if (typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\")\n            map.set(key, value.toString());\n        else\n            throw new Error(`Not supported value type '${typeof value}' for key '${key}'.`);\n    }\n    return map;\n}\n"],"sourceRoot":""}